#include "spi/include/kernel/process.h"
#include "spi/include/kernel/memory.h"
#include "time/ap_time.h"
#include "proc/ap_proc.h"

// control flag
static int disabled = 0;

// cycle and time variables
static ap_cycle_t startCycle = 0LL;
static ap_cycle_t stopCycle = 0LL;
static ap_cycle_t elapsedCycles = 0LL;
static double elapsedTime = 0;

// job id number
static uint64_t jobId;

// processor information
static int numProcessesOnNode;
static int processHWThreads;

// torus informaion 
static int torusCoords[5];
static int isTorus[5];
static int torusSize[5];
static int TCoord; // TODO add TCoord logic
static int thdMask; // TODO add thdMask logic

// memory information
static uint64_t heapMaxUsed;


/*==========================================================*/
/* Function to initialize data collection                   */
/*==========================================================*/

int AP_Proc_Init(int disabledArg) {

  /*-------------------------------------------------------*/
  /* set collection control, return if not collecting data */
  /*-------------------------------------------------------*/

  disabled = disabledArg;
  if (disabled != 0) return 0;


  return 0;
}


/*==========================================================*/
/* Function to start data collection                        */
/*   Starts process timer                                   */
/*==========================================================*/

int AP_Proc_Start() {

  /*-------------------------------*/
  /* Return if not collecting data */
  /*-------------------------------*/

  if (disabled != 0) return 0;

  /*---------------------*/
  /* Start process timer */
  /*---------------------*/

  APCYCLES(startCycle);


  return 0;
}


/*==========================================================*/
/* Function to stop data collection                         */
/*  stops process timer                                     */
/*==========================================================*/

int AP_Proc_Stop() {

  /*-------------------------------*/
  /* Return if not collecting data */
  /*-------------------------------*/

  if (disabled != 0) return 0;

  /*--------------------*/
  /* Stop process timer */
  /*--------------------*/

  APCYCLES(stopCycle);


  return 0;
}


/*==========================================================*/
/* Function to finalize data collection                     */
/*==========================================================*/

int AP_Proc_Finalize() {

  /*-------------------------------*/
  /* Return if not collecting data */
  /*-------------------------------*/

  if (disabled != 0) return 0;

  /*--------------------------------*/
  /* Determine process elapsed time */
  /*--------------------------------*/

  elapsedCycles = stopCycle-startCycle;
  elapsedTime = APCTCONV(elapsedCycles);

  /*------------*/
  /* Get Job Id */
  /*------------*/

  jobId = Kernel_GetJobID();

  /*--------------------------------*/
  /* Get cores and hardware threads */
  /*--------------------------------*/

  numProcessesOnNode = (int) Kernel_ProcessCount();
  processHWThreads = (int) Kernel_ProcessorCount();

  /*-------------------------------------------------------*/
  /* Get torus information                                 */
  /*-------------------------------------------------------*/

  Personality_t personality;
  Kernel_GetPersonality(&personality, sizeof(personality));

  torusCoords[0] = personality.Network_Config.Acoord;
  torusCoords[1] = personality.Network_Config.Bcoord;
  torusCoords[2] = personality.Network_Config.Ccoord;
  torusCoords[3] = personality.Network_Config.Dcoord;
  torusCoords[4] = personality.Network_Config.Ecoord;

  torusSize[0] = personality.Network_Config.Anodes;
  torusSize[1] = personality.Network_Config.Bnodes;
  torusSize[2] = personality.Network_Config.Cnodes;
  torusSize[3] = personality.Network_Config.Dnodes;
  torusSize[4] = personality.Network_Config.Enodes;

  isTorus[0] = 0;
  isTorus[1] = 0;
  isTorus[2] = 0;
  isTorus[3] = 0;
  isTorus[4] = 0;

  if (personality.Network_Config.NetFlags & ND_ENABLE_TORUS_DIM_A) isTorus[0] = 1;
  if (personality.Network_Config.NetFlags & ND_ENABLE_TORUS_DIM_B) isTorus[1] = 1;
  if (personality.Network_Config.NetFlags & ND_ENABLE_TORUS_DIM_C) isTorus[2] = 1;
  if (personality.Network_Config.NetFlags & ND_ENABLE_TORUS_DIM_D) isTorus[3] = 1;
  if (personality.Network_Config.NetFlags & ND_ENABLE_TORUS_DIM_E) isTorus[4] = 1;

  /*------------------------*/
  /* Get memory information */
  /*------------------------*/

  Kernel_GetMemorySize(KERNEL_MEMSIZE_HEAPMAX, &heapMaxUsed);


  return 0;
}


/*==========================================================*/
/* Function to return collected data                        */
/*==========================================================*/

int AP_Proc_GetData(ap_procData_t* data) {

  /*-------------------------------*/
  /* Return if not collecting data */
  /*-------------------------------*/

  data->disabled = disabled;
  if (disabled != 0) return 0;

  /*-----------------------*/
  /* Copy data into struct */
  /*-----------------------*/

  data->startCycle = startCycle;
  data->stopCycle = stopCycle;
  data->elapsedCycles = elapsedCycles;
  data->elapsedTime = elapsedTime;
  data->jobId = jobId;
  data->numProcessesOnNode = numProcessesOnNode;
  data->processHWThreads = processHWThreads;

  int i;
  for(i = 0; i < 5; i++) {
    data->torusCoords[i] = torusCoords[i];
    data->isTorus[i] = isTorus[i];
    data->torusSize[i] = torusSize[i];
  }

  data->heapMaxUsed = heapMaxUsed;


  return 0;
}
